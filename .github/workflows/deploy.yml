name: Deploy Next.js + Express with CDK

on:
  push:
    branches: 
      - main        # Deploy to prod
      - develop     # Deploy to staging
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-west-1
  NODE_VERSION: '18'

jobs:
  # Determine environment based on branch
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  # Deploy infrastructure with CDK
  infrastructure:
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    outputs:
      api-endpoint: ${{ steps.deploy.outputs.ApiEndpoint }}
      frontend-url: ${{ steps.deploy.outputs.FrontendUrl }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Check environment secrets
        env:
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          HASH_SALT: ${{ secrets.HASH_SALT }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
        run: |
          echo "Checking required environment variables..."
          echo "Environment is ${{ needs.setup.outputs.environment }}"
          REQUIRED_SECRETS=("AWS_ROLE_ARN" "MONGODB_URI" "JWT_SECRET" "REFRESH_SECRET" "HASH_SALT" "EMAIL_USER" "EMAIL_PASS")

          missing=false
          for secret in "${REQUIRED_SECRETS[@]}"; do
            value="${!secret}"
            if [ -z "$value" ]; then
              echo "❌ Missing secret or env variable: $secret"
              missing=true
            else
              echo "✅ Found $secret (length: ${#value})"
            fi
          done

          if [ "$missing" = true ]; then
            echo "Error: One or more required secrets are missing."
            exit 1
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install CDK dependencies
        working-directory: infrastructure
        run: npm ci
      
      - name: Deploy infrastructure
        id: deploy
        working-directory: infrastructure
        run: |
          # Deploy with environment-specific context
          npx cdk deploy --all --require-approval never \
            --context environment=${{ needs.setup.outputs.environment }} \
            --context mongodb-uri="${{ secrets.MONGODB_URI }}" \
            --context jwt-secret="${{ secrets.JWT_SECRET }}" \
            --context refresh-secret="${{ secrets.REFRESH_SECRET }}" \
            --context email-user="${{ secrets.EMAIL_USER }}" \
            --context email-pass="${{ secrets.EMAIL_PASS }}" \
            --context hash-salt="${{ secrets.HASH_SALT }}" \
            --outputs-file outputs.json
          
          # Export outputs for other jobs
          STACK_NAME="AdminPortalServerStack-${{ needs.setup.outputs.environment }}"
          echo "ApiEndpoint=$(cat outputs.json | jq -r ".\"$STACK_NAME\".ApiEndpoint")" >> $GITHUB_OUTPUT
          echo "FrontendUrl=$(cat outputs.json | jq -r ".\"$STACK_NAME\".FrontendUrl")" >> $GITHUB_OUTPUT

  # Deployment summary
  summary:
    needs: [setup, infrastructure]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && always()
    steps:
      - name: Deployment Summary
        run: |
          echo "### 🚀 Deployment Complete - ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "- **API Endpoint**: ${{ needs.infrastructure.outputs.api-endpoint }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend URL**: ${{ needs.infrastructure.outputs.frontend-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Services" >> $GITHUB_STEP_SUMMARY
          echo "- **Express API**: ✅ Deployed via CDK" >> $GITHUB_STEP_SUMMARY
          echo "- **Next.js Frontend**: ✅ Deployed via CDK" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 All services deployed successfully!" >> $GITHUB_STEP_SUMMARY